#!/usr/bin/python2.7
#
# Univention UCC status csv helper
#
# Copyright (C) 2013-2015 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

LOGFILE = '/var/log/univention/ucc-clients/ucc-status.log'
DATE_FORMAT = '%Y-%m-%d %H:%M:%S'
FORMAT = 'hostname,ip,local_image,last_local_image_update,last_software_update,time'

import sys
import univention.config_registry
import csv
import time
import optparse
import gzip
import glob
import os

# usage
usage = "usage: %prog [options]\n\n"
usage += "This program reads the thin-client status logs from\n"
usage += "%s*\n" % LOGFILE
usage += "and prints the newest status line for each thin-client \n"
usage += "to stdout or into a tab separated csv file."

# options
parser = optparse.OptionParser(usage=usage)
parser.add_option("-o", "--output-file", dest="outFile", help="write status to csv file")
parser.add_option("-f", "--format", dest="format", help="output format, ,-separated list of elements hostname,ip,local_image,last_local_image_update,last_software_update,time (this is the default order)")
parser.add_option("-d", "--date-format", dest="dateFormat", help="date format in output (default: %s)" % DATE_FORMAT)
parser.add_option("-i", "--input-file", dest="inputfile", help="log file to read from (default: %s)" % LOGFILE)
parser.add_option("-n", "--host-history", dest="hostname", help="show all log messages for HOSTNAME")
parser.set_defaults(format = FORMAT, dateFormat = DATE_FORMAT, inputfile = LOGFILE)
options, args = parser.parse_args()

# output format
format = options.format.split(",")

# open log and read data into data dict
data = {}
lineCounter = 0
try:
	fh = open(options.inputfile, "rb")
except IOError, e:
	print e
	sys.exit(1)

# read csv file line per line
reader = csv.reader(fh, delimiter='\t', quotechar='|', quoting=csv.QUOTE_MINIMAL)
for row in reader:
	# get key=value elements
	tmp = {}
	for element in row:
		keyValue = element.split("=", 1)
		if len(keyValue) >= 2:
			tmp[keyValue[0]] = keyValue[1]

	tmp["logfile"] = options.inputfile
	hostname = tmp.get("hostname", "")
	if options.hostname:
		if options.hostname == hostname:
			hostname = hostname + str(lineCounter)
		else:
			continue

	# convert time
	if tmp.get("time", ""):
		tmp["time"] = time.strftime(options.dateFormat, time.localtime(float(tmp["time"])))

	# ignore entries without hostname and store data in data dict
	if hostname:
		data[hostname] = tmp

	lineCounter += 1
fh.close()

if options.hostname:
	# sort entries by time (if time is not present ==> order is untouched)
	clients = data.items()
	clients.sort(lambda x,y: cmp(x[1].get('time'), y[1].get('time')))
	clients = [ x[0] for x in clients ]
else:
	# sort entries by hostname
	clients = sorted(data.keys())

# print output to csv file
if options.outFile:
	try:
		header = {}
		for e in format:
			header[e] = 1
		out = csv.DictWriter(open(options.outFile, 'wb'), 
				delimiter="\t", quotechar='|', 
				quoting=csv.QUOTE_MINIMAL, fieldnames=format)
	except IOError, e:
		print e
		sys.exit(1)

	# write header
	header = {}
	for i in format:
		header[i] = i
	out.writerow(header)

	# write data
	for client in clients:
		row = {}
		for element in format:
			row[element] = data[client].get(element, "None")
		out.writerow(row)
# print output to stdout
else:
	for client in clients:
		print "Hostname: " + data[client].get("hostname", "None")
		for element in format:
			print "\t" + element + ": " + data[client].get(element, "None")
