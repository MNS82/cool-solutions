#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Cool solutions -- SANIS import
#
# Like what you see? Join us!
# https://www.univention.com/about-us/careers/vacancies/
#
# Copyright 2023 Univention GmbH
#
# https://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <https://www.gnu.org/licenses/>.

from sanis_import import SanisImport, NoSchoolException, DataExtractException

# API URLs
TOKEN_URL = 'https://auth.stage.niedersachsen-login.schule/realms/SANIS/protocol/openid-connect/token'
SANIS_API = 'https://api-schulen.stage.niedersachsen-login.schule/v1'

# Config files
SISOPI_CONFIG = '/usr/share/ucs-school-import/configs/user_import_sisopi.json'
SANIS_CONFIG = '/usr/share/univention-sanis/sanis.json'

# local (workdir) files
CRED_FILE = 'credentials'
TEMP_CONFIG = 'temp_config.json'
SCRIPT_NAME = 'run_import'


def main():

	sanis_import = SanisImport(api_url=SANIS_API, token_url=TOKEN_URL, cred_file=CRED_FILE)
	sanis_import.read_input_data()
	#sanis_import.resolve_contexts()
	sanis_import.dump_stores_to_csv()

	try:
		schools = sanis_import.get_school_mapping()
	except NoSchoolException as ex:
		print(ex.args[0])
		print('Bitte korrigieren Sie den obigen Fehler.')
		print('Der Import kann nur gestartet werden, wenn die Konfiguration korrekt ist.')
		return 1

	# Prepare import configs and data. Will only be done if everything is in tune.
	sanis_import.create_config([SISOPI_CONFIG, SANIS_CONFIG], TEMP_CONFIG)

	# extract_school_data writes CSV files for each configured role, and collects
	# the commands to be executed in an internal variable in SanisImport.
	for school, sanis_id in schools.items():
		try:
			sanis_import.extract_school_data(school, sanis_id)
		except DataExtractException as ex:
			print(ex.args[0])
			print('Die extrahierten Daten sind nicht korrekt bzw. vollst√§ndig.')
			print('Bitte starten Sie keinen Import mit diesen Daten.')
			return 1

	# Now: print the commands out.
	sanis_import.write_command_script(SCRIPT_NAME)

	return 0


if __name__ == '__main__':
	main()
